// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview An AI agent that parses natural language search queries into structured filters.
 *
 * - parseSearchQuery - A function that handles parsing the search query.
 * - ParseSearchQueryInput - The input type for the parseSearchQuery function.
 * - ParseSearchQueryOutput - The return type for the parseSearchQuery function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ParseSearchQueryInputSchema = z.object({
  query: z.string().describe('The natural language search query from the user.'),
});
export type ParseSearchQueryInput = z.infer<typeof ParseSearchQueryInputSchema>;

const ParseSearchQueryOutputSchema = z.object({
  category: z.string().optional().describe('The product category, if mentioned (e.g., "pottery", "textiles", "jewelry", "paintings", "woodwork").'),
  maxPrice: z.number().optional().describe('The maximum price, if specified.'),
  colors: z.array(z.string()).optional().describe('An array of colors mentioned in the query.'),
  materials: z.array(z.string()).optional().describe('An array of materials mentioned (e.g., "ceramic", "wood", "silver").'),
  keywords: z.array(z.string()).optional().describe('Any other descriptive keywords (e.g., "rustic", "minimalist", "handmade").'),
});
export type ParseSearchQueryOutput = z.infer<typeof ParseSearchQueryOutputSchema>;

export async function parseSearchQuery(input: ParseSearchQueryInput): Promise<ParseSearchQueryOutput> {
  return parseSearchQueryFlow(input);
}

const prompt = ai.definePrompt({
  name: 'parseSearchQueryPrompt',
  input: {schema: ParseSearchQueryInputSchema},
  output: {schema: ParseSearchQueryOutputSchema},
  prompt: `You are an intelligent e-commerce search engine. Your task is to parse a user's natural language query into a structured JSON object for filtering products in a marketplace for artisan goods.

  The available categories are: pottery, textiles, jewelry, paintings, woodwork.

  Analyze the user's query and extract the following information:
  - The product category.
  - The maximum price (if mentioned).
  - Any colors mentioned.
  - Any materials mentioned (e.g., ceramic, wood, silver, wool, clay).
  - Any other descriptive keywords or attributes (e.g., rustic, modern, minimalist, handmade, gift).

  User Query: "{{{query}}}"

  Return a JSON object with the extracted filters. If a filter is not present in the query, omit the key. The 'maxPrice' should be a number. 'colors', 'materials', and 'keywords' should be arrays of strings.`,
});

const parseSearchQueryFlow = ai.defineFlow(
  {
    name: 'parseSearchQueryFlow',
    inputSchema: ParseSearchQueryInputSchema,
    outputSchema: ParseSearchQueryOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
