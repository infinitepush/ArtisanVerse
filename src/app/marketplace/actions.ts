// This is an autogenerated file from Firebase Studio.

'use server';

import { parseSearchQuery } from '@/ai/flows/parse-search-query';
import { products as allProducts } from '@/lib/data';
import type { Product } from '@/lib/types';
import { z } from 'zod';

const formSchema = z.object({
  query: z.string().optional(),
});

export interface SearchState {
  products: Product[];
  query: string;
}

export async function searchAction(prevState: SearchState, formData: FormData): Promise<SearchState> {
  const validatedFields = formSchema.safeParse({
    query: formData.get('query'),
  });

  if (!validatedFields.success || !validatedFields.data.query) {
    return { products: allProducts, query: '' };
  }

  const { query } = validatedFields.data;

  try {
    const filters = await parseSearchQuery({ query });

    let filteredProducts = allProducts;

    if (filters.category) {
      filteredProducts = filteredProducts.filter(p => p.categoryId.toLowerCase() === filters.category?.toLowerCase());
    }

    if (filters.maxPrice) {
      filteredProducts = filteredProducts.filter(p => p.price <= filters.maxPrice!);
    }

    if (filters.keywords && filters.keywords.length > 0) {
      filteredProducts = filteredProducts.filter(p =>
        filters.keywords!.some(keyword =>
          p.name.toLowerCase().includes(keyword.toLowerCase()) ||
          p.description.toLowerCase().includes(keyword.toLowerCase()) ||
          p.story.toLowerCase().includes(keyword.toLowerCase())
        )
      );
    }
    
    if (filters.colors && filters.colors.length > 0) {
        filteredProducts = filteredProducts.filter(p => 
            filters.colors!.some(color => 
                p.description.toLowerCase().includes(color.toLowerCase())
            )
        );
    }

    if (filters.materials && filters.materials.length > 0) {
        filteredProducts = filteredProducts.filter(p => 
            filters.materials!.some(material => 
                p.description.toLowerCase().includes(material.toLowerCase())
            )
        );
    }


    return { products: filteredProducts, query };
  } catch (error) {
    console.error('Error parsing search query:', error);
    // In case of an error, return all products or handle it gracefully
    return { products: allProducts, query };
  }
}
